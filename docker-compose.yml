version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    image: shadcn-nextjs-app:latest
    container_name: nextjs-app
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_APP_NAME=ShadCN Next.js App
      # Add other environment variables from .env.local
    env_file:
      - .env.local
    networks:
      - app-network
    volumes:
      # Persist Next.js cache
      - nextjs-cache:/app/.next/cache
    depends_on:
      - redis
    healthcheck:
      test: ['CMD', 'node', '-e', "require('http').get('http://localhost:3000/api/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # PostgreSQL Database (optional)
  # Uncomment if you need a database
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: postgres-db
  #   restart: unless-stopped
  #   ports:
  #     - '5432:5432'
  #   environment:
  #     - POSTGRES_USER=appuser
  #     - POSTGRES_PASSWORD=apppassword
  #     - POSTGRES_DB=appdb
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ['CMD-SHELL', 'pg_isready -U appuser']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Nginx Reverse Proxy (optional)
  # Uncomment for production deployment
  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx-proxy
  #   restart: unless-stopped
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - app
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  nextjs-cache:
    driver: local
  redis-data:
    driver: local
  # postgres-data:
  #   driver: local
